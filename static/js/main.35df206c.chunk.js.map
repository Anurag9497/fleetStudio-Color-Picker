{"version":3,"sources":["components/Search/index.js","components/ColorCard/index.js","App.js","reportWebVitals.js","index.js"],"names":["Search","handleColourData","useState","input","setInput","id","type","value","onChange","event","target","onClick","ColorCard","colour","colourTag","title","style","App","data","setData","className","map","item","itemIndex","backgroundColor","hex","name","fetch","then","res","status","json","Error","obj","colorArr","colors","slice","catch","err","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAuBeA,MApBf,YAAqC,IAApBC,EAAmB,EAAnBA,iBAAmB,EACNC,mBAAS,KADH,mBACzBC,EADyB,KAClBC,EADkB,KAOhC,OACI,sBAAKC,GAAG,SAAR,UACI,uBACIA,GAAG,eACHC,KAAK,OACLC,MAAOJ,EACPK,SAVI,SAACC,GACjBL,EAASK,EAAMC,OAAOH,UAWd,wBAAQF,GAAG,gBAAgBC,KAAK,SAASK,QAAS,kBAAMV,EAAiBE,EAAOC,IAAhF,wB,MCNGQ,MATf,YAAgD,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,MACnC,OACI,sBAAKV,GAAG,OAAOU,MAAOA,EAAtB,UACI,qBAAKV,GAAG,YAAYW,MAAOH,IAC3B,qBAAKR,GAAG,WAAR,SAAoBS,QCsCjBG,MAxCf,WAAgB,IAAD,EACWf,mBAAS,IADpB,mBACNgB,EADM,KACAC,EADA,KAoBb,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIf,GAAG,QAAP,0BACA,qBAAKA,GAAG,gBAAR,SAEIa,EAAKG,KAAI,SAACC,EAAMC,GACd,OAAO,cAAC,EAAD,CAEGV,OAAQ,CAACW,gBAAiBF,EAAKG,KAC/BX,UAAWQ,EAAKG,IAChBV,MAAOO,EAAKI,MAHPH,QAQrB,cAAC,EAAD,CAAQtB,iBAhCa,SAACE,EAAOC,GAC7BuB,MAAM,oCAAD,OAAqCxB,IACzCyB,MAAK,SAAAC,GACJ,GAAgB,MAAbA,EAAIC,OACL,OAAOD,EAAIE,OAEX,MAAMC,MAAM,yBAEfJ,MAAK,SAAAK,GACF,IAAIC,EAAWD,EAAIE,OAAOC,MAAM,EAAE,IAElCjB,EAAQe,GACR9B,EAAS,QAEZiC,OAAM,SAAAC,GAAG,OAAIC,MAAMD,aCVXE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.35df206c.chunk.js","sourcesContent":["import React,{ useState } from 'react';\r\nimport './index.css';\r\n\r\nfunction Search({handleColourData}) {\r\n    const [input, setInput] = useState(\" \");\r\n\r\nconst handleInput = (event) => {\r\n    setInput(event.target.value);\r\n};\r\n\r\n    return (\r\n        <div id=\"search\">\r\n            <input \r\n                id=\"search-input\" \r\n                type=\"text\" \r\n                value={input} \r\n                onChange={handleInput}\r\n            />\r\n            <button id=\"search-button\" type=\"button\" onClick={() => handleColourData(input, setInput)}>Search</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction ColorCard({colour, colourTag, title}) {\r\n    return (\r\n        <div id=\"card\" title={title}>\r\n            <div id=\"card-body\" style={colour}></div>\r\n            <div id=\"card-tag\">{colourTag}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorCard;\r\n","import React,{ useState } from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport ColorCard from './components/ColorCard';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleColourData = (input, setInput) => {\n      fetch(`https://api.color.pizza/v1/names/${input}`)\n      .then(res => {\n        if(res.status===200)\n          return res.json();\n        else\n          throw Error('Colour Not Found !'); \n      })\n      .then(obj => {\n          let colorArr = obj.colors.slice(0,50);\n          // console.log(colorArr);\n          setData(colorArr);\n          setInput(\" \");\n      })\n      .catch(err => alert(err));\n  };\n\n  return (\n    <div className=\"App\">\n      <h2 id=\"title\">Color Picker</h2>\n      <div id=\"display-color\">\n        {\n          data.map((item, itemIndex) => {\n            return <ColorCard \n                      key={itemIndex} \n                      colour={{backgroundColor: item.hex}} \n                      colourTag={item.hex}\n                      title={item.name} \n                  />;\n          })\n        }\n      </div>\n      <Search handleColourData={handleColourData}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}